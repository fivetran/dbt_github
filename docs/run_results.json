{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-03-22T19:38:13.629509Z", "invocation_id": "da72c046-0c32-4657-a718-feb406235a22", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.066489Z", "completed_at": "2024-03-22T19:38:12.089857Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.095685Z", "completed_at": "2024-03-22T19:38:12.095694Z"}], "thread_id": "Thread-1", "execution_time": 0.03786492347717285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_assignee_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_issue_assignee_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_assignee_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.073919Z", "completed_at": "2024-03-22T19:38:12.092854Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.096473Z", "completed_at": "2024-03-22T19:38:12.096476Z"}], "thread_id": "Thread-2", "execution_time": 0.037481069564819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_closed_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_issue_closed_history_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_closed_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.082358Z", "completed_at": "2024-03-22T19:38:12.093302Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.097383Z", "completed_at": "2024-03-22T19:38:12.097385Z"}], "thread_id": "Thread-5", "execution_time": 0.03665590286254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_merged_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_issue_merged_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_merged_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.079925Z", "completed_at": "2024-03-22T19:38:12.093874Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.098448Z", "completed_at": "2024-03-22T19:38:12.098452Z"}], "thread_id": "Thread-4", "execution_time": 0.03864908218383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_label_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_issue_label_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_label_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.084922Z", "completed_at": "2024-03-22T19:38:12.094512Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.099268Z", "completed_at": "2024-03-22T19:38:12.099273Z"}], "thread_id": "Thread-6", "execution_time": 0.03804183006286621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_issue_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.087276Z", "completed_at": "2024-03-22T19:38:12.094825Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.099572Z", "completed_at": "2024-03-22T19:38:12.099575Z"}], "thread_id": "Thread-7", "execution_time": 0.038080692291259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__label_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_label_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__label_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.077040Z", "completed_at": "2024-03-22T19:38:12.095171Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.099849Z", "completed_at": "2024-03-22T19:38:12.099851Z"}], "thread_id": "Thread-3", "execution_time": 0.04104781150817871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_comment_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_issue_comment_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_comment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.090217Z", "completed_at": "2024-03-22T19:38:12.095977Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.101038Z", "completed_at": "2024-03-22T19:38:12.101042Z"}], "thread_id": "Thread-8", "execution_time": 0.03904223442077637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__pull_request_review_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_pull_request_review_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_review_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.109135Z", "completed_at": "2024-03-22T19:38:12.126091Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.131707Z", "completed_at": "2024-03-22T19:38:12.131712Z"}], "thread_id": "Thread-1", "execution_time": 0.029997825622558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__pull_request_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_pull_request_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.126385Z", "completed_at": "2024-03-22T19:38:12.127392Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.131973Z", "completed_at": "2024-03-22T19:38:12.131976Z"}], "thread_id": "Thread-3", "execution_time": 0.02579212188720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_issue_assignee_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.127730Z", "completed_at": "2024-03-22T19:38:12.128721Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.132448Z", "completed_at": "2024-03-22T19:38:12.132451Z"}], "thread_id": "Thread-8", "execution_time": 0.022735118865966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_issue_closed_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.112968Z", "completed_at": "2024-03-22T19:38:12.128984Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.133131Z", "completed_at": "2024-03-22T19:38:12.133134Z"}], "thread_id": "Thread-2", "execution_time": 0.031024932861328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__repo_team_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"55_github_integration_tests\".\"github_repo_team_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__repo_team_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.116056Z", "completed_at": "2024-03-22T19:38:12.129379Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.133382Z", "completed_at": "2024-03-22T19:38:12.133385Z"}], "thread_id": "Thread-5", "execution_time": 0.03026103973388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__repository_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_repository_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__repository_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.120807Z", "completed_at": "2024-03-22T19:38:12.130250Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.134654Z", "completed_at": "2024-03-22T19:38:12.134658Z"}], "thread_id": "Thread-6", "execution_time": 0.029830217361450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__team_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"55_github_integration_tests\".\"github_team_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__team_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.123227Z", "completed_at": "2024-03-22T19:38:12.130721Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.135403Z", "completed_at": "2024-03-22T19:38:12.135406Z"}], "thread_id": "Thread-7", "execution_time": 0.030200958251953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__user_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_user_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__user_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.118503Z", "completed_at": "2024-03-22T19:38:12.130977Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.135667Z", "completed_at": "2024-03-22T19:38:12.135670Z"}], "thread_id": "Thread-4", "execution_time": 0.03162097930908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__requested_reviewer_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"55_github_integration_tests\".\"github_requested_reviewer_history_data\"", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__requested_reviewer_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.144659Z", "completed_at": "2024-03-22T19:38:12.145826Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.156911Z", "completed_at": "2024-03-22T19:38:12.156915Z"}], "thread_id": "Thread-1", "execution_time": 0.019216060638427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_issue_comment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.146103Z", "completed_at": "2024-03-22T19:38:12.147058Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.157158Z", "completed_at": "2024-03-22T19:38:12.157161Z"}], "thread_id": "Thread-3", "execution_time": 0.019304990768432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_issue_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.147545Z", "completed_at": "2024-03-22T19:38:12.148501Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.157616Z", "completed_at": "2024-03-22T19:38:12.157619Z"}], "thread_id": "Thread-8", "execution_time": 0.019357919692993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_issue_label_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.149210Z", "completed_at": "2024-03-22T19:38:12.150828Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.158270Z", "completed_at": "2024-03-22T19:38:12.158272Z"}], "thread_id": "Thread-2", "execution_time": 0.019344329833984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_issue_merged_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.151093Z", "completed_at": "2024-03-22T19:38:12.152034Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.158514Z", "completed_at": "2024-03-22T19:38:12.158517Z"}], "thread_id": "Thread-5", "execution_time": 0.019430875778198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_label_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.152717Z", "completed_at": "2024-03-22T19:38:12.153660Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.159710Z", "completed_at": "2024-03-22T19:38:12.159713Z"}], "thread_id": "Thread-6", "execution_time": 0.019570112228393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_pull_request_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.154126Z", "completed_at": "2024-03-22T19:38:12.155056Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.160404Z", "completed_at": "2024-03-22T19:38:12.160407Z"}], "thread_id": "Thread-7", "execution_time": 0.019681215286254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_pull_request_review_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.155310Z", "completed_at": "2024-03-22T19:38:12.156242Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.160645Z", "completed_at": "2024-03-22T19:38:12.160648Z"}], "thread_id": "Thread-4", "execution_time": 0.01978302001953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_repo_team_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.168980Z", "completed_at": "2024-03-22T19:38:12.170111Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.193658Z", "completed_at": "2024-03-22T19:38:12.193663Z"}], "thread_id": "Thread-1", "execution_time": 0.031215667724609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_repository_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.170378Z", "completed_at": "2024-03-22T19:38:12.172021Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.193918Z", "completed_at": "2024-03-22T19:38:12.193921Z"}], "thread_id": "Thread-3", "execution_time": 0.031336307525634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_requested_reviewer_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.172501Z", "completed_at": "2024-03-22T19:38:12.173492Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.194373Z", "completed_at": "2024-03-22T19:38:12.194375Z"}], "thread_id": "Thread-8", "execution_time": 0.03142285346984863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_team_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.174212Z", "completed_at": "2024-03-22T19:38:12.175172Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.195011Z", "completed_at": "2024-03-22T19:38:12.195014Z"}], "thread_id": "Thread-2", "execution_time": 0.0314030647277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.github_integration_tests.github_user_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.186112Z", "completed_at": "2024-03-22T19:38:12.681299Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.683236Z", "completed_at": "2024-03-22T19:38:12.683239Z"}], "thread_id": "Thread-7", "execution_time": 0.5686910152435303, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_merged", "compiled": true, "compiled_code": "with issue_merged as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_merged_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    actor_id\n    \n as \n    \n    actor_id\n    \n, \n    \n    \n    commit_sha\n    \n as \n    \n    commit_sha\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    merged_at\n    \n as \n    \n    merged_at\n    \n\n\n\n\n    from issue_merged\n\n), fields as (\n\n    select \n      issue_id,\n      cast(merged_at as timestamp) as merged_at\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_merged\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.189734Z", "completed_at": "2024-03-22T19:38:12.679557Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.681685Z", "completed_at": "2024-03-22T19:38:12.681690Z"}], "thread_id": "Thread-4", "execution_time": 0.5698301792144775, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_label", "compiled": true, "compiled_code": "with issue_label as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_label_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n            \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    label_id\n    \n as \n    \n    label_id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n\n\n\n\n    from issue_label\n\n), fields as (\n\n    select \n      issue_id,\n      label_id\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_label\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.206163Z", "completed_at": "2024-03-22T19:38:12.682039Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.683561Z", "completed_at": "2024-03-22T19:38:12.683565Z"}], "thread_id": "Thread-3", "execution_time": 0.5398411750793457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__label", "compiled": true, "compiled_code": "with issue_label as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__label_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n            \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    color\n    \n as \n    \n    color\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_default\n    \n as \n    \n    is_default\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n\n    from issue_label\n\n), fields as (\n\n    select \n        id as label_id,\n        _fivetran_synced,\t\n        color,\n        description,\n        is_default,\n        name as label,\n        url\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__label\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.175430Z", "completed_at": "2024-03-22T19:38:12.671335Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.680024Z", "completed_at": "2024-03-22T19:38:12.680033Z"}], "thread_id": "Thread-5", "execution_time": 0.5736010074615479, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_assignee", "compiled": true, "compiled_code": "with issue_assignee as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_assignee_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n            \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n    from issue_assignee\n\n), fields as (\n\n    select \n      issue_id,\n      user_id\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_assignee\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.209764Z", "completed_at": "2024-03-22T19:38:12.737272Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.741595Z", "completed_at": "2024-03-22T19:38:12.741600Z"}], "thread_id": "Thread-8", "execution_time": 0.594397783279419, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_comment", "compiled": true, "compiled_code": "with issue_comment as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_comment_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n    from issue_comment\n\n), fields as (\n\n    select \n      id as issue_comment_id,\n      issue_id,\n      user_id\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_comment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.213600Z", "completed_at": "2024-03-22T19:38:12.738739Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.743370Z", "completed_at": "2024-03-22T19:38:12.743375Z"}], "thread_id": "Thread-2", "execution_time": 0.6004137992858887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__pull_request_review", "compiled": true, "compiled_code": "with pull_request_review as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_review_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    commit_sha\n    \n as \n    \n    commit_sha\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    pull_request_id\n    \n as \n    \n    pull_request_id\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    submitted_at\n    \n as \n    \n    submitted_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n    from pull_request_review\n\n), fields as (\n\n    select \n      id as pull_request_review_id,\n      pull_request_id,\n      cast(submitted_at as timestamp) as submitted_at,\n      state,\n      user_id\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_review\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.201797Z", "completed_at": "2024-03-22T19:38:12.778017Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.779181Z", "completed_at": "2024-03-22T19:38:12.779186Z"}], "thread_id": "Thread-1", "execution_time": 0.6223800182342529, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue", "compiled": true, "compiled_code": "with issue as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n            \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    locked\n    \n as \n    \n    locked\n    \n, \n    \n    \n    milestone_id\n    \n as \n    \n    milestone_id\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    pull_request\n    \n as \n    \n    pull_request\n    \n, \n    \n    \n    repository_id\n    \n as \n    \n    repository_id\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n    from issue \n\n), fields as (\n\n    select \n      id as issue_id,\n      body,\n      cast(closed_at as timestamp) as closed_at,\n      cast(created_at as timestamp) as created_at,\n      locked as is_locked,\n      milestone_id,\n      number as issue_number,\n      pull_request as is_pull_request,\n      repository_id,\n      state,\n      title,\n      cast(updated_at as timestamp) as updated_at,\n      user_id\n      \n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.181738Z", "completed_at": "2024-03-22T19:38:12.778276Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.779453Z", "completed_at": "2024-03-22T19:38:12.779456Z"}], "thread_id": "Thread-6", "execution_time": 0.6594822406768799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__issue_closed_history", "compiled": true, "compiled_code": "with issue_closed_history as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_closed_history_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    actor_id\n    \n as \n    \n    actor_id\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    \n    \n    commit_sha\n    \n as \n    \n    commit_sha\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n    from issue_closed_history\n\n), fields as (\n\n    select \n      issue_id,\n      cast(updated_at as timestamp) as updated_at,\n      closed as is_closed\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__issue_closed_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.828151Z", "completed_at": "2024-03-22T19:38:12.841679Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.842205Z", "completed_at": "2024-03-22T19:38:12.842210Z"}], "thread_id": "Thread-6", "execution_time": 0.015460968017578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.not_null_stg_github__label_label_id.9f07379974", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect label_id\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__label\"\nwhere label_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.837515Z", "completed_at": "2024-03-22T19:38:12.842482Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.843769Z", "completed_at": "2024-03-22T19:38:12.843773Z"}], "thread_id": "Thread-1", "execution_time": 0.007751941680908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.unique_stg_github__label_label_id.74d3c21466", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    label_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__label\"\nwhere label_id is not null\ngroup by label_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.845398Z", "completed_at": "2024-03-22T19:38:12.854983Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.855473Z", "completed_at": "2024-03-22T19:38:12.855477Z"}], "thread_id": "Thread-6", "execution_time": 0.011902809143066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.dbt_utils_unique_combination_of_columns_stg_github__issue_assignee_issue_id__user_id.7e32c758e4", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        issue_id, user_id\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_assignee\"\n    group by issue_id, user_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.858626Z", "completed_at": "2024-03-22T19:38:12.864581Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.865619Z", "completed_at": "2024-03-22T19:38:12.865624Z"}], "thread_id": "Thread-6", "execution_time": 0.00899195671081543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.not_null_stg_github__issue_comment_issue_comment_id.11ddd56f0f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_comment_id\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_comment\"\nwhere issue_comment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.861715Z", "completed_at": "2024-03-22T19:38:12.864873Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.865898Z", "completed_at": "2024-03-22T19:38:12.865901Z"}], "thread_id": "Thread-1", "execution_time": 0.008572101593017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.unique_stg_github__issue_comment_issue_comment_id.695b2e454a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_comment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_comment\"\nwhere issue_comment_id is not null\ngroup by issue_comment_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.871607Z", "completed_at": "2024-03-22T19:38:12.874382Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.875142Z", "completed_at": "2024-03-22T19:38:12.875146Z"}], "thread_id": "Thread-1", "execution_time": 0.0077669620513916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.unique_stg_github__pull_request_review_pull_request_review_id.1092c62508", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pull_request_review_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_review\"\nwhere pull_request_review_id is not null\ngroup by pull_request_review_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.868872Z", "completed_at": "2024-03-22T19:38:12.874877Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.876135Z", "completed_at": "2024-03-22T19:38:12.876138Z"}], "thread_id": "Thread-6", "execution_time": 0.00916290283203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.not_null_stg_github__pull_request_review_pull_request_review_id.c646eee790", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pull_request_review_id\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_review\"\nwhere pull_request_review_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.878404Z", "completed_at": "2024-03-22T19:38:12.884786Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.885286Z", "completed_at": "2024-03-22T19:38:12.885290Z"}], "thread_id": "Thread-1", "execution_time": 0.008795738220214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.not_null_stg_github__issue_issue_id.74e7778ca7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__issue\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.882051Z", "completed_at": "2024-03-22T19:38:12.885544Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.886758Z", "completed_at": "2024-03-22T19:38:12.886761Z"}], "thread_id": "Thread-6", "execution_time": 0.009635686874389648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.unique_stg_github__issue_issue_id.84891aeece", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__issue\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.899367Z", "completed_at": "2024-03-22T19:38:12.902774Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:12.904184Z", "completed_at": "2024-03-22T19:38:12.904187Z"}], "thread_id": "Thread-6", "execution_time": 0.006290912628173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.dbt_utils_unique_combination_of_columns_stg_github__issue_closed_history_issue_id__updated_at.b98ed2830d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        issue_id, updated_at\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_closed_history\"\n    group by issue_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.755813Z", "completed_at": "2024-03-22T19:38:13.362421Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.365583Z", "completed_at": "2024-03-22T19:38:13.365587Z"}], "thread_id": "Thread-3", "execution_time": 0.6634900569915771, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__repository", "compiled": true, "compiled_code": "with repository as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__repository_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n            \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    archived\n    \n as \n    \n    archived\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    default_branch\n    \n as \n    \n    default_branch\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fork\n    \n as \n    \n    fork\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    homepage\n    \n as \n    \n    homepage\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    language\n    \n as \n    \n    language\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    private\n    \n as \n    \n    private\n    \n\n\n\n\n    from repository\n\n), fields as (\n\n    select \n      id as repository_id,\n      full_name,\n      private as is_private\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__repository\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.759498Z", "completed_at": "2024-03-22T19:38:13.364319Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.367747Z", "completed_at": "2024-03-22T19:38:13.367750Z"}], "thread_id": "Thread-5", "execution_time": 0.674609899520874, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__team", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__team_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    org_id\n    \n as \n    \n    org_id\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    privacy\n    \n as \n    \n    privacy\n    \n, \n    \n    \n    slug\n    \n as \n    \n    slug\n    \n\n\n\n        \n    from base\n    \n), final as (\n    \n    select \n        id as team_id,\n        description,\n        name,\n        parent_id,\n        privacy,\n        slug\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__team\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.751139Z", "completed_at": "2024-03-22T19:38:13.361785Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.364961Z", "completed_at": "2024-03-22T19:38:13.364968Z"}], "thread_id": "Thread-4", "execution_time": 0.6772160530090332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__repo_team", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__repo_team_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    permission\n    \n as \n    \n    permission\n    \n, \n    \n    \n    repository_id\n    \n as \n    \n    repository_id\n    \n, \n    \n    \n    team_id\n    \n as \n    \n    team_id\n    \n\n\n\n        \n    from base\n    \n), final as (\n    \n    select \n        repository_id,\n        team_id\n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__repo_team\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.802284Z", "completed_at": "2024-03-22T19:38:13.363992Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.367444Z", "completed_at": "2024-03-22T19:38:13.367447Z"}], "thread_id": "Thread-2", "execution_time": 0.6189670562744141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__requested_reviewer_history", "compiled": true, "compiled_code": "with requested_reviewer_history as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__requested_reviewer_history_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    actor_id\n    \n as \n    \n    actor_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    pull_request_id\n    \n as \n    \n    pull_request_id\n    \n, \n    \n    \n    removed\n    \n as \n    \n    removed\n    \n, \n    \n    \n    requested_id\n    \n as \n    \n    requested_id\n    \n\n\n\n\n    from requested_reviewer_history\n\n), fields as (\n\n    select \n      pull_request_id,\n      cast(created_at as timestamp) as created_at,\n      requested_id,\n      removed\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__requested_reviewer_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.745035Z", "completed_at": "2024-03-22T19:38:13.362132Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.365277Z", "completed_at": "2024-03-22T19:38:13.365281Z"}], "thread_id": "Thread-7", "execution_time": 0.6803028583526611, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__pull_request", "compiled": true, "compiled_code": "with pull_request as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    base_label\n    \n as \n    \n    base_label\n    \n, \n    \n    \n    base_ref\n    \n as \n    \n    base_ref\n    \n, \n    \n    \n    base_repo_id\n    \n as \n    \n    base_repo_id\n    \n, \n    \n    \n    base_sha\n    \n as \n    \n    base_sha\n    \n, \n    \n    \n    base_user_id\n    \n as \n    \n    base_user_id\n    \n, \n    \n    \n    head_label\n    \n as \n    \n    head_label\n    \n, \n    \n    \n    head_ref\n    \n as \n    \n    head_ref\n    \n, \n    \n    \n    head_repo_id\n    \n as \n    \n    head_repo_id\n    \n, \n    \n    \n    head_sha\n    \n as \n    \n    head_sha\n    \n, \n    \n    \n    head_user_id\n    \n as \n    \n    head_user_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    merge_commit_sha\n    \n as \n    \n    merge_commit_sha\n    \n\n\n\n\n    from pull_request\n\n), fields as (\n\n    select \n      id as pull_request_id,\n      issue_id,\n      head_repo_id,\n      head_user_id\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:12.795851Z", "completed_at": "2024-03-22T19:38:13.364631Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.368034Z", "completed_at": "2024-03-22T19:38:13.368037Z"}], "thread_id": "Thread-8", "execution_time": 0.6269180774688721, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github_source.stg_github__user", "compiled": true, "compiled_code": "with github_user as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__user_tmp\"\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github_source/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n            \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    login\n    \n as \n    \n    login\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n        \n    from github_user\n\n), fields as (\n\n    select\n      id as user_id,\n      login as login_name,\n      name,\n      company\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "\"postgres\".\"55_github_integration_tests\".\"stg_github__user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.410493Z", "completed_at": "2024-03-22T19:38:13.421531Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.427585Z", "completed_at": "2024-03-22T19:38:13.427590Z"}], "thread_id": "Thread-6", "execution_time": 0.02117776870727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.not_null_stg_github__repository_repository_id.fa3c9c712f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository_id\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__repository\"\nwhere repository_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.415592Z", "completed_at": "2024-03-22T19:38:13.423864Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.429206Z", "completed_at": "2024-03-22T19:38:13.429209Z"}], "thread_id": "Thread-1", "execution_time": 0.03497815132141113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.unique_stg_github__repository_repository_id.cf6398db3d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    repository_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__repository\"\nwhere repository_id is not null\ngroup by repository_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.430456Z", "completed_at": "2024-03-22T19:38:13.457014Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.461392Z", "completed_at": "2024-03-22T19:38:13.461395Z"}], "thread_id": "Thread-3", "execution_time": 0.04376387596130371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.not_null_stg_github__team_team_id.440aefe7a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_id\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__team\"\nwhere team_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.434216Z", "completed_at": "2024-03-22T19:38:13.457338Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.461644Z", "completed_at": "2024-03-22T19:38:13.461647Z"}], "thread_id": "Thread-5", "execution_time": 0.04375600814819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.unique_stg_github__team_team_id.94e9716ab4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__team\"\nwhere team_id is not null\ngroup by team_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.441208Z", "completed_at": "2024-03-22T19:38:13.458750Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.468090Z", "completed_at": "2024-03-22T19:38:13.468094Z"}], "thread_id": "Thread-2", "execution_time": 0.044137001037597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.not_null_stg_github__repo_team_repository_id.7076be2503", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository_id\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__repo_team\"\nwhere repository_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.444557Z", "completed_at": "2024-03-22T19:38:13.459019Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.468367Z", "completed_at": "2024-03-22T19:38:13.468370Z"}], "thread_id": "Thread-7", "execution_time": 0.04395794868469238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.not_null_stg_github__repo_team_team_id.000230e64c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_id\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__repo_team\"\nwhere team_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.462622Z", "completed_at": "2024-03-22T19:38:13.471734Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.478175Z", "completed_at": "2024-03-22T19:38:13.478180Z"}], "thread_id": "Thread-6", "execution_time": 0.027944087982177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.not_null_stg_github__pull_request_pull_request_id.bc2132ee71", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pull_request_id\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request\"\nwhere pull_request_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.465517Z", "completed_at": "2024-03-22T19:38:13.471982Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.478450Z", "completed_at": "2024-03-22T19:38:13.478453Z"}], "thread_id": "Thread-1", "execution_time": 0.02798295021057129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.unique_stg_github__pull_request_pull_request_id.8f1ca366fa", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pull_request_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request\"\nwhere pull_request_id is not null\ngroup by pull_request_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.482871Z", "completed_at": "2024-03-22T19:38:13.491120Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.491930Z", "completed_at": "2024-03-22T19:38:13.491934Z"}], "thread_id": "Thread-3", "execution_time": 0.019929170608520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.not_null_stg_github__user_user_id.3ac9bb7b4b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__user\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.486647Z", "completed_at": "2024-03-22T19:38:13.492711Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.494077Z", "completed_at": "2024-03-22T19:38:13.494080Z"}], "thread_id": "Thread-5", "execution_time": 0.020798206329345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github_source.unique_stg_github__user_user_id.5c1a00cd90", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"55_github_integration_tests\".\"stg_github__user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.514767Z", "completed_at": "2024-03-22T19:38:13.522084Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.522562Z", "completed_at": "2024-03-22T19:38:13.522567Z"}], "thread_id": "Thread-6", "execution_time": 0.009409904479980469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__issues", "compiled": true, "compiled_code": "with  __dbt__cte__int_github__issue_label_joined as (\nwith issue_label as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_label\"\n\n), label as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__label\"\n\n), joined as (\n\n    select \n        issue_label.issue_id,\n        label.label\n    from issue_label\n    left join label \n        on issue_label.label_id = label.label_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_github__issue_labels as (\nwith issue_label as (\n    select *\n    from __dbt__cte__int_github__issue_label_joined\n)\n\nselect\n  issue_id,\n  \n    string_agg(label, ', ')\n\n as labels\nfrom issue_label\ngroup by issue_id\n),  __dbt__cte__int_github__repository_teams as (\n\n\nwith repository as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__repository\"\n),\n\nrepo_teams as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__repo_team\"\n),\n\nteams as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__team\"\n),\n\nteam_repo as (\n    select \n        repository.repository_id,\n        repository.full_name as repository,\n        teams.name as team_name\n    from repository\n\n    left join repo_teams\n        on repository.repository_id = repo_teams.repository_id\n\n    left join teams\n        on repo_teams.team_id = teams.team_id\n),\n\nfinal as (\n    select\n        repository_id,\n        repository,\n        \n    string_agg(team_name, ', ')\n\n as repository_team_names\n    from team_repo\n\n    group by 1, 2\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_github__issue_assignees as (\nwith issue_assignee as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_assignee\"\n), \n\ngithub_user as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__user\"\n)\n\nselect\n  issue_assignee.issue_id,\n  \n    string_agg(github_user.login_name, ', ')\n\n as assignees\nfrom issue_assignee\njoin github_user on issue_assignee.user_id = github_user.user_id\ngroup by 1\n),  __dbt__cte__int_github__issue_open_length as (\nwith issue as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue\"\n), \n\nissue_closed_history as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_closed_history\"\n), \n\nclose_events_stacked as (\n    select   \n      issue_id,\n      created_at as updated_at,\n      false as is_closed\n    from issue -- required because issue_closed_history table does not have a line item for when the issue was opened\n    union all\n    select\n      issue_id,\n      updated_at,\n      is_closed\n    from issue_closed_history\n), \n\nclose_events_with_timestamps as (\n  select\n    issue_id,\n    updated_at as valid_starting,\n    coalesce(lead(updated_at) over (partition by issue_id order by updated_at), \n    current_timestamp::timestamp\n) as valid_until,\n    is_closed\n  from close_events_stacked\n)\n\nselect\n  issue_id,\n  sum(\n        (\n        (\n        (\n        ((valid_until)::date - (valid_starting)::date)\n     * 24 + date_part('hour', (valid_until)::timestamp) - date_part('hour', (valid_starting)::timestamp))\n     * 60 + date_part('minute', (valid_until)::timestamp) - date_part('minute', (valid_starting)::timestamp))\n     * 60 + floor(date_part('second', (valid_until)::timestamp)) - floor(date_part('second', (valid_starting)::timestamp)))\n    ) /60/60/24 as days_issue_open,\n  count(*) - 1 as number_of_times_reopened\nfrom close_events_with_timestamps\n  where not is_closed\ngroup by issue_id\n),  __dbt__cte__int_github__issue_comments as (\nwith issue_comment as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_comment\"\n)\n\nselect\n  issue_id,\n  count(*) as number_of_comments\nfrom issue_comment\ngroup by issue_id\n),  __dbt__cte__int_github__pull_request_times as (\nwith pull_request_review as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_review\"\n), \n\npull_request as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request\"\n), \n\nrequested_reviewer_history as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__requested_reviewer_history\"\n    where not removed\n), \n\nissue as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue\"\n), \n\nissue_merged as (\n    select\n      issue_id,\n      min(merged_at) as merged_at\n      from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_merged\"\n    group by 1\n), \n\nfirst_request_time as (\n    select\n      pull_request.issue_id,\n      pull_request.pull_request_id,\n      -- Finds the first review that is by the requested reviewer and is not a dismissal\n      min(case when requested_reviewer_history.requested_id = pull_request_review.user_id then\n          case when lower(pull_request_review.state) in ('commented', 'approved', 'changes_requested') \n                then pull_request_review.submitted_at end \n      else null end) as time_of_first_requested_reviewer_review,\n      min(requested_reviewer_history.created_at) as time_of_first_request,\n      min(pull_request_review.submitted_at) as time_of_first_review_post_request\n    from pull_request\n    join requested_reviewer_history on requested_reviewer_history.pull_request_id = pull_request.pull_request_id\n    left join pull_request_review on pull_request_review.pull_request_id = pull_request.pull_request_id\n      and pull_request_review.submitted_at > requested_reviewer_history.created_at\n    group by 1, 2\n)\n\nselect\n  first_request_time.issue_id,\n  issue_merged.merged_at,\n  \n        (\n        (\n        (\n        ((coalesce(time_of_first_review_post_request, \n    current_timestamp::timestamp\n))::date - (time_of_first_request)::date)\n     * 24 + date_part('hour', (coalesce(time_of_first_review_post_request, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (time_of_first_request)::timestamp))\n     * 60 + date_part('minute', (coalesce(time_of_first_review_post_request, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (time_of_first_request)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(time_of_first_review_post_request, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (time_of_first_request)::timestamp)))\n    / 60/60 as hours_request_review_to_first_review,\n  \n        (\n        (\n        (\n        ((least(\n                            coalesce(time_of_first_requested_reviewer_review, \n    current_timestamp::timestamp\n),\n                            coalesce(issue.closed_at, \n    current_timestamp::timestamp\n)))::date - (time_of_first_request)::date)\n     * 24 + date_part('hour', (least(\n                            coalesce(time_of_first_requested_reviewer_review, \n    current_timestamp::timestamp\n),\n                            coalesce(issue.closed_at, \n    current_timestamp::timestamp\n)))::timestamp) - date_part('hour', (time_of_first_request)::timestamp))\n     * 60 + date_part('minute', (least(\n                            coalesce(time_of_first_requested_reviewer_review, \n    current_timestamp::timestamp\n),\n                            coalesce(issue.closed_at, \n    current_timestamp::timestamp\n)))::timestamp) - date_part('minute', (time_of_first_request)::timestamp))\n     * 60 + floor(date_part('second', (least(\n                            coalesce(time_of_first_requested_reviewer_review, \n    current_timestamp::timestamp\n),\n                            coalesce(issue.closed_at, \n    current_timestamp::timestamp\n)))::timestamp)) - floor(date_part('second', (time_of_first_request)::timestamp)))\n     / 60/60 as hours_request_review_to_first_action,\n  \n        (\n        (\n        (\n        ((merged_at)::date - (time_of_first_request)::date)\n     * 24 + date_part('hour', (merged_at)::timestamp) - date_part('hour', (time_of_first_request)::timestamp))\n     * 60 + date_part('minute', (merged_at)::timestamp) - date_part('minute', (time_of_first_request)::timestamp))\n     * 60 + floor(date_part('second', (merged_at)::timestamp)) - floor(date_part('second', (time_of_first_request)::timestamp)))\n    / 60/60 as hours_request_review_to_merge\nfrom first_request_time\njoin issue on first_request_time.issue_id = issue.issue_id\nleft join issue_merged on first_request_time.issue_id = issue_merged.issue_id\n),  __dbt__cte__int_github__pull_request_reviewers as (\nwith pull_request_review as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_review\"\n), \n\ngithub_user as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__user\"\n),\n\nactual_reviewers as (\n  select\n    pull_request_review.pull_request_id,\n    \n    string_agg(distinct github_user.login_name, ', ')\n\n as reviewers,\n    count(*) as number_of_reviews\nfrom pull_request_review\nleft join github_user on pull_request_review.user_id = github_user.user_id\ngroup by 1\n),\n\nrequested_reviewer_history as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__requested_reviewer_history\"\n    where removed = false\n),\n\nrequested_reviewers as (\n  select\n    requested_reviewer_history.pull_request_id,\n    \n    string_agg(distinct github_user.login_name, ', ')\n\n as requested_reviewers\nfrom requested_reviewer_history\nleft join github_user on requested_reviewer_history.requested_id = github_user.user_id\ngroup by 1\n),\n\njoined as (\n  select\n    actual_reviewers.pull_request_id,\n    actual_reviewers.reviewers,\n    requested_reviewers.requested_reviewers,\n    actual_reviewers.number_of_reviews\n  from actual_reviewers\n  full outer join requested_reviewers \n    on requested_reviewers.pull_request_id = actual_reviewers.pull_request_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_github__issue_joined as (\nwith issue as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue\"\n), \n\nissue_labels as (\n    select *\n    from __dbt__cte__int_github__issue_labels\n), \n\nrepository_teams as (\n    select \n    \n      *\n    from __dbt__cte__int_github__repository_teams\n\n    \n), \n\nissue_assignees as (\n    select *\n    from __dbt__cte__int_github__issue_assignees\n), \n\nissue_open_length as (\n    select *\n    from __dbt__cte__int_github__issue_open_length\n), \n\nissue_comments as (\n    select *\n    from __dbt__cte__int_github__issue_comments\n), \n\ncreator as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__user\"\n), \n\npull_request_times as (\n    select *\n    from __dbt__cte__int_github__pull_request_times\n), \n\npull_request_reviewers as (\n    select *\n    from __dbt__cte__int_github__pull_request_reviewers\n), \n\npull_request as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request\"\n)\n\nselect\n  issue.*,\n  case \n    when issue.is_pull_request then 'https://github.com/' || repository_teams.repository || '/pull/' || issue.issue_number\n    else 'https://github.com/' || repository_teams.repository || '/issues/' || issue.issue_number\n  end as url_link,\n  issue_open_length.days_issue_open,\n  issue_open_length.number_of_times_reopened,\n  labels.labels,\n  issue_comments.number_of_comments,\n  repository_teams.repository,\n  \n  repository_teams.repository_team_names,\n  \n  issue_assignees.assignees,\n  creator.login_name as creator_login_name,\n  creator.name as creator_name,\n  creator.company as creator_company,\n  hours_request_review_to_first_review,\n  hours_request_review_to_first_action,\n  hours_request_review_to_merge,\n  merged_at,\n  reviewers, \n  requested_reviewers,\n  number_of_reviews\nfrom issue\nleft join issue_labels as labels\n  on issue.issue_id = labels.issue_id\njoin repository_teams\n  on issue.repository_id = repository_teams.repository_id\nleft join issue_assignees\n  on issue.issue_id = issue_assignees.issue_id\nleft join issue_open_length\n  on issue.issue_id = issue_open_length.issue_id\nleft join issue_comments \n  on issue.issue_id = issue_comments.issue_id\nleft join creator \n  on issue.user_id = creator.user_id\nleft join pull_request\n  on issue.issue_id = pull_request.issue_id\nleft join pull_request_times\n  on issue.issue_id = pull_request_times.issue_id\nleft join pull_request_reviewers\n  on pull_request.pull_request_id = pull_request_reviewers.pull_request_id\n), issue_joined as (\n    select *\n    from __dbt__cte__int_github__issue_joined  \n)\n\nselect\n  issue_id,\n  body,\n  closed_at,\n  created_at,\n  is_locked,\n  milestone_id,\n  issue_number,\n  is_pull_request,\n  repository_id,\n  state,\n  title,\n  updated_at,\n  user_id,\n  url_link,\n  days_issue_open,\n  number_of_times_reopened,\n  labels,\n  number_of_comments,\n  repository,\n  \n  repository_team_names,\n  \n  assignees,\n  creator_login_name,\n  creator_name,\n  creator_company\nfrom issue_joined\nwhere not is_pull_request", "relation_name": "\"postgres\".\"55_github_integration_tests_github\".\"github__issues\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.519431Z", "completed_at": "2024-03-22T19:38:13.523371Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.523830Z", "completed_at": "2024-03-22T19:38:13.523833Z"}], "thread_id": "Thread-1", "execution_time": 0.01030278205871582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__pull_requests", "compiled": true, "compiled_code": "with  __dbt__cte__int_github__issue_label_joined as (\nwith issue_label as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_label\"\n\n), label as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__label\"\n\n), joined as (\n\n    select \n        issue_label.issue_id,\n        label.label\n    from issue_label\n    left join label \n        on issue_label.label_id = label.label_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_github__issue_labels as (\nwith issue_label as (\n    select *\n    from __dbt__cte__int_github__issue_label_joined\n)\n\nselect\n  issue_id,\n  \n    string_agg(label, ', ')\n\n as labels\nfrom issue_label\ngroup by issue_id\n),  __dbt__cte__int_github__repository_teams as (\n\n\nwith repository as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__repository\"\n),\n\nrepo_teams as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__repo_team\"\n),\n\nteams as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__team\"\n),\n\nteam_repo as (\n    select \n        repository.repository_id,\n        repository.full_name as repository,\n        teams.name as team_name\n    from repository\n\n    left join repo_teams\n        on repository.repository_id = repo_teams.repository_id\n\n    left join teams\n        on repo_teams.team_id = teams.team_id\n),\n\nfinal as (\n    select\n        repository_id,\n        repository,\n        \n    string_agg(team_name, ', ')\n\n as repository_team_names\n    from team_repo\n\n    group by 1, 2\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_github__issue_assignees as (\nwith issue_assignee as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_assignee\"\n), \n\ngithub_user as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__user\"\n)\n\nselect\n  issue_assignee.issue_id,\n  \n    string_agg(github_user.login_name, ', ')\n\n as assignees\nfrom issue_assignee\njoin github_user on issue_assignee.user_id = github_user.user_id\ngroup by 1\n),  __dbt__cte__int_github__issue_open_length as (\nwith issue as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue\"\n), \n\nissue_closed_history as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_closed_history\"\n), \n\nclose_events_stacked as (\n    select   \n      issue_id,\n      created_at as updated_at,\n      false as is_closed\n    from issue -- required because issue_closed_history table does not have a line item for when the issue was opened\n    union all\n    select\n      issue_id,\n      updated_at,\n      is_closed\n    from issue_closed_history\n), \n\nclose_events_with_timestamps as (\n  select\n    issue_id,\n    updated_at as valid_starting,\n    coalesce(lead(updated_at) over (partition by issue_id order by updated_at), \n    current_timestamp::timestamp\n) as valid_until,\n    is_closed\n  from close_events_stacked\n)\n\nselect\n  issue_id,\n  sum(\n        (\n        (\n        (\n        ((valid_until)::date - (valid_starting)::date)\n     * 24 + date_part('hour', (valid_until)::timestamp) - date_part('hour', (valid_starting)::timestamp))\n     * 60 + date_part('minute', (valid_until)::timestamp) - date_part('minute', (valid_starting)::timestamp))\n     * 60 + floor(date_part('second', (valid_until)::timestamp)) - floor(date_part('second', (valid_starting)::timestamp)))\n    ) /60/60/24 as days_issue_open,\n  count(*) - 1 as number_of_times_reopened\nfrom close_events_with_timestamps\n  where not is_closed\ngroup by issue_id\n),  __dbt__cte__int_github__issue_comments as (\nwith issue_comment as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_comment\"\n)\n\nselect\n  issue_id,\n  count(*) as number_of_comments\nfrom issue_comment\ngroup by issue_id\n),  __dbt__cte__int_github__pull_request_times as (\nwith pull_request_review as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_review\"\n), \n\npull_request as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request\"\n), \n\nrequested_reviewer_history as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__requested_reviewer_history\"\n    where not removed\n), \n\nissue as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue\"\n), \n\nissue_merged as (\n    select\n      issue_id,\n      min(merged_at) as merged_at\n      from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue_merged\"\n    group by 1\n), \n\nfirst_request_time as (\n    select\n      pull_request.issue_id,\n      pull_request.pull_request_id,\n      -- Finds the first review that is by the requested reviewer and is not a dismissal\n      min(case when requested_reviewer_history.requested_id = pull_request_review.user_id then\n          case when lower(pull_request_review.state) in ('commented', 'approved', 'changes_requested') \n                then pull_request_review.submitted_at end \n      else null end) as time_of_first_requested_reviewer_review,\n      min(requested_reviewer_history.created_at) as time_of_first_request,\n      min(pull_request_review.submitted_at) as time_of_first_review_post_request\n    from pull_request\n    join requested_reviewer_history on requested_reviewer_history.pull_request_id = pull_request.pull_request_id\n    left join pull_request_review on pull_request_review.pull_request_id = pull_request.pull_request_id\n      and pull_request_review.submitted_at > requested_reviewer_history.created_at\n    group by 1, 2\n)\n\nselect\n  first_request_time.issue_id,\n  issue_merged.merged_at,\n  \n        (\n        (\n        (\n        ((coalesce(time_of_first_review_post_request, \n    current_timestamp::timestamp\n))::date - (time_of_first_request)::date)\n     * 24 + date_part('hour', (coalesce(time_of_first_review_post_request, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (time_of_first_request)::timestamp))\n     * 60 + date_part('minute', (coalesce(time_of_first_review_post_request, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (time_of_first_request)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(time_of_first_review_post_request, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (time_of_first_request)::timestamp)))\n    / 60/60 as hours_request_review_to_first_review,\n  \n        (\n        (\n        (\n        ((least(\n                            coalesce(time_of_first_requested_reviewer_review, \n    current_timestamp::timestamp\n),\n                            coalesce(issue.closed_at, \n    current_timestamp::timestamp\n)))::date - (time_of_first_request)::date)\n     * 24 + date_part('hour', (least(\n                            coalesce(time_of_first_requested_reviewer_review, \n    current_timestamp::timestamp\n),\n                            coalesce(issue.closed_at, \n    current_timestamp::timestamp\n)))::timestamp) - date_part('hour', (time_of_first_request)::timestamp))\n     * 60 + date_part('minute', (least(\n                            coalesce(time_of_first_requested_reviewer_review, \n    current_timestamp::timestamp\n),\n                            coalesce(issue.closed_at, \n    current_timestamp::timestamp\n)))::timestamp) - date_part('minute', (time_of_first_request)::timestamp))\n     * 60 + floor(date_part('second', (least(\n                            coalesce(time_of_first_requested_reviewer_review, \n    current_timestamp::timestamp\n),\n                            coalesce(issue.closed_at, \n    current_timestamp::timestamp\n)))::timestamp)) - floor(date_part('second', (time_of_first_request)::timestamp)))\n     / 60/60 as hours_request_review_to_first_action,\n  \n        (\n        (\n        (\n        ((merged_at)::date - (time_of_first_request)::date)\n     * 24 + date_part('hour', (merged_at)::timestamp) - date_part('hour', (time_of_first_request)::timestamp))\n     * 60 + date_part('minute', (merged_at)::timestamp) - date_part('minute', (time_of_first_request)::timestamp))\n     * 60 + floor(date_part('second', (merged_at)::timestamp)) - floor(date_part('second', (time_of_first_request)::timestamp)))\n    / 60/60 as hours_request_review_to_merge\nfrom first_request_time\njoin issue on first_request_time.issue_id = issue.issue_id\nleft join issue_merged on first_request_time.issue_id = issue_merged.issue_id\n),  __dbt__cte__int_github__pull_request_reviewers as (\nwith pull_request_review as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request_review\"\n), \n\ngithub_user as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__user\"\n),\n\nactual_reviewers as (\n  select\n    pull_request_review.pull_request_id,\n    \n    string_agg(distinct github_user.login_name, ', ')\n\n as reviewers,\n    count(*) as number_of_reviews\nfrom pull_request_review\nleft join github_user on pull_request_review.user_id = github_user.user_id\ngroup by 1\n),\n\nrequested_reviewer_history as (\n\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__requested_reviewer_history\"\n    where removed = false\n),\n\nrequested_reviewers as (\n  select\n    requested_reviewer_history.pull_request_id,\n    \n    string_agg(distinct github_user.login_name, ', ')\n\n as requested_reviewers\nfrom requested_reviewer_history\nleft join github_user on requested_reviewer_history.requested_id = github_user.user_id\ngroup by 1\n),\n\njoined as (\n  select\n    actual_reviewers.pull_request_id,\n    actual_reviewers.reviewers,\n    requested_reviewers.requested_reviewers,\n    actual_reviewers.number_of_reviews\n  from actual_reviewers\n  full outer join requested_reviewers \n    on requested_reviewers.pull_request_id = actual_reviewers.pull_request_id\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_github__issue_joined as (\nwith issue as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__issue\"\n), \n\nissue_labels as (\n    select *\n    from __dbt__cte__int_github__issue_labels\n), \n\nrepository_teams as (\n    select \n    \n      *\n    from __dbt__cte__int_github__repository_teams\n\n    \n), \n\nissue_assignees as (\n    select *\n    from __dbt__cte__int_github__issue_assignees\n), \n\nissue_open_length as (\n    select *\n    from __dbt__cte__int_github__issue_open_length\n), \n\nissue_comments as (\n    select *\n    from __dbt__cte__int_github__issue_comments\n), \n\ncreator as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__user\"\n), \n\npull_request_times as (\n    select *\n    from __dbt__cte__int_github__pull_request_times\n), \n\npull_request_reviewers as (\n    select *\n    from __dbt__cte__int_github__pull_request_reviewers\n), \n\npull_request as (\n    select *\n    from \"postgres\".\"55_github_integration_tests\".\"stg_github__pull_request\"\n)\n\nselect\n  issue.*,\n  case \n    when issue.is_pull_request then 'https://github.com/' || repository_teams.repository || '/pull/' || issue.issue_number\n    else 'https://github.com/' || repository_teams.repository || '/issues/' || issue.issue_number\n  end as url_link,\n  issue_open_length.days_issue_open,\n  issue_open_length.number_of_times_reopened,\n  labels.labels,\n  issue_comments.number_of_comments,\n  repository_teams.repository,\n  \n  repository_teams.repository_team_names,\n  \n  issue_assignees.assignees,\n  creator.login_name as creator_login_name,\n  creator.name as creator_name,\n  creator.company as creator_company,\n  hours_request_review_to_first_review,\n  hours_request_review_to_first_action,\n  hours_request_review_to_merge,\n  merged_at,\n  reviewers, \n  requested_reviewers,\n  number_of_reviews\nfrom issue\nleft join issue_labels as labels\n  on issue.issue_id = labels.issue_id\njoin repository_teams\n  on issue.repository_id = repository_teams.repository_id\nleft join issue_assignees\n  on issue.issue_id = issue_assignees.issue_id\nleft join issue_open_length\n  on issue.issue_id = issue_open_length.issue_id\nleft join issue_comments \n  on issue.issue_id = issue_comments.issue_id\nleft join creator \n  on issue.user_id = creator.user_id\nleft join pull_request\n  on issue.issue_id = pull_request.issue_id\nleft join pull_request_times\n  on issue.issue_id = pull_request_times.issue_id\nleft join pull_request_reviewers\n  on pull_request.pull_request_id = pull_request_reviewers.pull_request_id\n), issue_joined as (\n    select *\n    from __dbt__cte__int_github__issue_joined  \n)\n\nselect\n  *\nfrom issue_joined\nwhere is_pull_request", "relation_name": "\"postgres\".\"55_github_integration_tests_github\".\"github__pull_requests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.525683Z", "completed_at": "2024-03-22T19:38:13.531703Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.545633Z", "completed_at": "2024-03-22T19:38:13.545640Z"}], "thread_id": "Thread-8", "execution_time": 0.02173304557800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__issues_issue_id.fed0631e25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__issues\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.532179Z", "completed_at": "2024-03-22T19:38:13.545954Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.548194Z", "completed_at": "2024-03-22T19:38:13.548197Z"}], "thread_id": "Thread-7", "execution_time": 0.0198819637298584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.unique_github__issues_issue_id.6723b9b1db", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__issues\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.535664Z", "completed_at": "2024-03-22T19:38:13.546896Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.548874Z", "completed_at": "2024-03-22T19:38:13.548877Z"}], "thread_id": "Thread-5", "execution_time": 0.02002406120300293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__daily_metrics", "compiled": true, "compiled_code": "with github_issues as (\n    select *\n    from \"postgres\".\"55_github_integration_tests_github\".\"github__issues\"\n), \n\npull_requests as (\n    select *\n    from \"postgres\".\"55_github_integration_tests_github\".\"github__pull_requests\"\n), \n\nissues_opened_per_day as (\n    select \n      date_trunc('day', created_at) as day,\n      repository as repository,\n      count(*) as number_issues_opened,\n      sum(days_issue_open) as sum_days_issue_open,\n      max(days_issue_open) as longest_days_issue_open\n    from github_issues\n    group by \n      1,2\n), \n\nissues_closed_per_day as (\n    select \n      date_trunc('day', closed_at) as day,\n      repository as repository,\n      count(*) as number_issues_closed\n    from github_issues\n    where closed_at is not null\n    group by \n      1,2\n), \n\nprs_opened_per_day as (\n    select \n      date_trunc('day', created_at) as day,\n      repository as repository,\n      count(*) as number_prs_opened,\n      sum(days_issue_open) as sum_days_pr_open,\n      max(days_issue_open) as longest_days_pr_open\n    from pull_requests\n    group by \n      1,2\n), \n\nprs_merged_per_day as (\n    select \n      date_trunc('day', merged_at) as day, \n      repository as repository,\n      count(*) as number_prs_merged\n    from pull_requests\n    where merged_at is not null\n    group by\n      1,2\n), \n\nprs_closed_without_merge_per_day as (\n    select \n      date_trunc('day', closed_at) as day,\n      repository as repository,\n      count(*) as number_prs_closed_without_merge\n    from pull_requests\n    where closed_at is not null\n      and merged_at is null\n    group by\n      1,2\n), \n\nissues_per_day as (\n    select \n      coalesce(issues_opened_per_day.day, \n        issues_closed_per_day.day\n      ) as day,\n      coalesce(issues_opened_per_day.repository, \n        issues_closed_per_day.repository\n      ) as repository,\n      number_issues_opened,\n      number_issues_closed,      \n      sum_days_issue_open,\n      longest_days_issue_open\n    from issues_opened_per_day\n    full outer join issues_closed_per_day\n    on \n      issues_opened_per_day.day = issues_closed_per_day.day\n      and issues_opened_per_day.repository = issues_closed_per_day.repository\n), \n\nprs_per_day as (\n    select \n      coalesce(prs_opened_per_day.day, \n        prs_merged_per_day.day,\n        prs_closed_without_merge_per_day.day\n      ) as day,\n      coalesce(prs_opened_per_day.repository, \n        prs_merged_per_day.repository,\n        prs_closed_without_merge_per_day.repository\n      ) as repository,\n      number_prs_opened,\n      number_prs_merged,\n      number_prs_closed_without_merge,\n      sum_days_pr_open,\n      longest_days_pr_open\n    from prs_opened_per_day\n    full outer join prs_merged_per_day \n    on\n      prs_opened_per_day.day = prs_merged_per_day.day\n      and prs_opened_per_day.repository = prs_merged_per_day.repository\n    full outer join prs_closed_without_merge_per_day \n    on\n      coalesce(prs_opened_per_day.day, prs_merged_per_day.day) = prs_closed_without_merge_per_day.day\n      and coalesce(prs_opened_per_day.repository, prs_merged_per_day.repository) = prs_closed_without_merge_per_day.repository\n)\n\nselect \n  coalesce(issues_per_day.day, prs_per_day.day) as day,\n  coalesce(issues_per_day.repository, prs_per_day.repository) as repository,\n  coalesce(number_issues_opened, 0) as number_issues_opened,\n  coalesce(number_issues_closed, 0) as number_issues_closed,\n  sum_days_issue_open,\n  longest_days_issue_open,\n  coalesce(number_prs_opened, 0) as number_prs_opened,\n  coalesce(number_prs_merged, 0) as number_prs_merged,\n  coalesce(number_prs_closed_without_merge, 0) as number_prs_closed_without_merge,\n  sum_days_pr_open,\n  longest_days_pr_open\nfrom issues_per_day \nfull outer join prs_per_day \non\n  issues_per_day.day = prs_per_day.day\n  and issues_per_day.repository = prs_per_day.repository", "relation_name": "\"postgres\".\"55_github_integration_tests_github\".\"github__daily_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.540484Z", "completed_at": "2024-03-22T19:38:13.547352Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.549661Z", "completed_at": "2024-03-22T19:38:13.549664Z"}], "thread_id": "Thread-2", "execution_time": 0.01995110511779785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__pull_requests_issue_id.7a49ca5a6f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__pull_requests\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.543097Z", "completed_at": "2024-03-22T19:38:13.547677Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.549933Z", "completed_at": "2024-03-22T19:38:13.549936Z"}], "thread_id": "Thread-4", "execution_time": 0.020073890686035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.unique_github__pull_requests_issue_id.ce23997907", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__pull_requests\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.556129Z", "completed_at": "2024-03-22T19:38:13.572951Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.575752Z", "completed_at": "2024-03-22T19:38:13.575762Z"}], "thread_id": "Thread-4", "execution_time": 0.02495884895324707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__monthly_metrics", "compiled": true, "compiled_code": "with daily_metrics as (\n    select *\n    from \"postgres\".\"55_github_integration_tests_github\".\"github__daily_metrics\"\n)\n\nselect \n  date_trunc('month', day) as month, \n  repository as repository,\n  sum(number_issues_opened) as number_issues_opened,\n  sum(number_issues_closed) as number_issues_closed,\n  sum(sum_days_issue_open) / sum(number_issues_opened) as avg_days_issue_open,\n  max(longest_days_issue_open) as longest_days_issue_open,\n  sum(number_prs_opened) as number_prs_opened,\n  sum(number_prs_merged) as number_prs_merged,\n  sum(number_prs_closed_without_merge) as number_prs_closed_without_merge,\n  sum(sum_days_pr_open) / sum(number_prs_opened) as avg_days_pr_open,\n  max(longest_days_pr_open) as longest_days_pr_open\nfrom daily_metrics \ngroup by 1,2", "relation_name": "\"postgres\".\"55_github_integration_tests_github\".\"github__monthly_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.559848Z", "completed_at": "2024-03-22T19:38:13.573383Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.576225Z", "completed_at": "2024-03-22T19:38:13.576227Z"}], "thread_id": "Thread-1", "execution_time": 0.024663925170898438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__quarterly_metrics", "compiled": true, "compiled_code": "with daily_metrics as (\n    select *\n    from \"postgres\".\"55_github_integration_tests_github\".\"github__daily_metrics\"\n)\n\nselect \n  date_trunc('quarter', day) as quarter, \n  repository as repository,\n  sum(number_issues_opened) as number_issues_opened,\n  sum(number_issues_closed) as number_issues_closed,\n  sum(sum_days_issue_open) / sum(number_issues_opened) as avg_days_issue_open,\n  max(longest_days_issue_open) as longest_days_issue_open,\n  sum(number_prs_opened) as number_prs_opened,\n  sum(number_prs_merged) as number_prs_merged,\n  sum(number_prs_closed_without_merge) as number_prs_closed_without_merge,\n  sum(sum_days_pr_open) / sum(number_prs_opened) as avg_days_pr_open,\n  max(longest_days_pr_open) as longest_days_pr_open\n\nfrom daily_metrics \ngroup by 1,2", "relation_name": "\"postgres\".\"55_github_integration_tests_github\".\"github__quarterly_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.562266Z", "completed_at": "2024-03-22T19:38:13.573758Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.576474Z", "completed_at": "2024-03-22T19:38:13.576477Z"}], "thread_id": "Thread-3", "execution_time": 0.024186134338378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__weekly_metrics", "compiled": true, "compiled_code": "with daily_metrics as (\n    select *\n    from \"postgres\".\"55_github_integration_tests_github\".\"github__daily_metrics\"\n)\n\nselect \n  date_trunc('week', day) as week,\n  repository as repository, \n  sum(number_issues_opened) as number_issues_opened,\n  sum(number_issues_closed) as number_issues_closed,\n  sum(sum_days_issue_open) / sum(number_issues_opened) as avg_days_issue_open,\n  max(longest_days_issue_open) as longest_days_issue_open,\n  sum(number_prs_opened) as number_prs_opened,\n  sum(number_prs_merged) as number_prs_merged,\n  sum(number_prs_closed_without_merge) as number_prs_closed_without_merge,\n  sum(sum_days_pr_open) / sum(number_prs_opened) as avg_days_pr_open,\n  max(longest_days_pr_open) as longest_days_pr_open\nfrom daily_metrics \ngroup by 1,2", "relation_name": "\"postgres\".\"55_github_integration_tests_github\".\"github__weekly_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.564390Z", "completed_at": "2024-03-22T19:38:13.574047Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.576957Z", "completed_at": "2024-03-22T19:38:13.576959Z"}], "thread_id": "Thread-6", "execution_time": 0.024569988250732422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.dbt_utils_unique_combination_of_columns_github__daily_metrics_repository__day.34151ac92e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        repository, day\n    from \"postgres\".\"55_github_integration_tests_github\".\"github__daily_metrics\"\n    group by repository, day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.567589Z", "completed_at": "2024-03-22T19:38:13.574541Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.577734Z", "completed_at": "2024-03-22T19:38:13.577737Z"}], "thread_id": "Thread-8", "execution_time": 0.024829864501953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__daily_metrics_day.647e494434", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__daily_metrics\"\nwhere day is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.570321Z", "completed_at": "2024-03-22T19:38:13.575275Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.578964Z", "completed_at": "2024-03-22T19:38:13.578967Z"}], "thread_id": "Thread-7", "execution_time": 0.02561187744140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__daily_metrics_repository.b67aa085ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__daily_metrics\"\nwhere repository is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.591605Z", "completed_at": "2024-03-22T19:38:13.608881Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.615221Z", "completed_at": "2024-03-22T19:38:13.615228Z"}], "thread_id": "Thread-5", "execution_time": 0.034288883209228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__monthly_metrics_month.9e4fba84df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__monthly_metrics\"\nwhere month is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.588468Z", "completed_at": "2024-03-22T19:38:13.612029Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.615506Z", "completed_at": "2024-03-22T19:38:13.615509Z"}], "thread_id": "Thread-2", "execution_time": 0.035154104232788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.dbt_utils_unique_combination_of_columns_github__monthly_metrics_repository__month.6a8bd674ae", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        repository, month\n    from \"postgres\".\"55_github_integration_tests_github\".\"github__monthly_metrics\"\n    group by repository, month\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.594176Z", "completed_at": "2024-03-22T19:38:13.612325Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.615771Z", "completed_at": "2024-03-22T19:38:13.615774Z"}], "thread_id": "Thread-4", "execution_time": 0.03489112854003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__monthly_metrics_repository.94a57ace26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__monthly_metrics\"\nwhere repository is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.599910Z", "completed_at": "2024-03-22T19:38:13.612596Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.616474Z", "completed_at": "2024-03-22T19:38:13.616476Z"}], "thread_id": "Thread-3", "execution_time": 0.03506207466125488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__quarterly_metrics_quarter.92394d46dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quarter\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__quarterly_metrics\"\nwhere quarter is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.596948Z", "completed_at": "2024-03-22T19:38:13.612860Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.616931Z", "completed_at": "2024-03-22T19:38:13.616934Z"}], "thread_id": "Thread-1", "execution_time": 0.03615403175354004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.dbt_utils_unique_combination_of_columns_github__quarterly_metrics_repository__quarter.e5b2e41275", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        repository, quarter\n    from \"postgres\".\"55_github_integration_tests_github\".\"github__quarterly_metrics\"\n    group by repository, quarter\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.602449Z", "completed_at": "2024-03-22T19:38:13.613993Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.618655Z", "completed_at": "2024-03-22T19:38:13.618658Z"}], "thread_id": "Thread-6", "execution_time": 0.03630709648132324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__quarterly_metrics_repository.d99ef517b0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__quarterly_metrics\"\nwhere repository is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.605747Z", "completed_at": "2024-03-22T19:38:13.614251Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.618920Z", "completed_at": "2024-03-22T19:38:13.618923Z"}], "thread_id": "Thread-8", "execution_time": 0.03640913963317871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.dbt_utils_unique_combination_of_columns_github__weekly_metrics_repository__week.48678f685c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        repository, week\n    from \"postgres\".\"55_github_integration_tests_github\".\"github__weekly_metrics\"\n    group by repository, week\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.609142Z", "completed_at": "2024-03-22T19:38:13.614742Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.619806Z", "completed_at": "2024-03-22T19:38:13.619809Z"}], "thread_id": "Thread-7", "execution_time": 0.03486514091491699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__weekly_metrics_repository.02cec60246", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__weekly_metrics\"\nwhere repository is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-22T19:38:13.623195Z", "completed_at": "2024-03-22T19:38:13.626342Z"}, {"name": "execute", "started_at": "2024-03-22T19:38:13.626825Z", "completed_at": "2024-03-22T19:38:13.626828Z"}], "thread_id": "Thread-5", "execution_time": 0.0047740936279296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__weekly_metrics_week.4b0b928243", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect week\nfrom \"postgres\".\"55_github_integration_tests_github\".\"github__weekly_metrics\"\nwhere week is null\n\n\n", "relation_name": null}], "elapsed_time": 3.0811290740966797, "args": {"send_anonymous_usage_stats": true, "static": false, "macro_debugging": false, "log_level": "info", "show_resource_report": false, "partial_parse": true, "static_parser": true, "cache_selected_only": false, "enable_legacy_logger": false, "log_format_file": "debug", "defer": false, "log_path": "/Users/catherinefritz/Documents/dbt_packages/github/dbt_github/integration_tests/logs", "log_format": "default", "print": true, "vars": {}, "which": "generate", "compile": true, "partial_parse_file_diff": true, "introspect": true, "profiles_dir": "/Users/catherinefritz/.dbt", "use_colors": true, "favor_state": false, "populate_cache": true, "project_dir": "/Users/catherinefritz/Documents/dbt_packages/github/dbt_github/integration_tests", "exclude": [], "strict_mode": false, "printer_width": 80, "invocation_command": "dbt docs generate", "select": [], "use_colors_file": true, "log_file_max_bytes": 10485760, "indirect_selection": "eager", "log_level_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "write_json": true, "quiet": false, "empty_catalog": false, "version_check": true}}